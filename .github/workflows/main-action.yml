name: Docker Image CI
# Test, Build, Deploy on push
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
# Test the flask app and then build
  test-and-build:

    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: medico
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        pip3 install -r requirements.txt
    - name: Test with unittest
      run: |
        python3 -m pytest
    - uses: actions/checkout@v2
    - name: Docker login
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}   
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
      run: |
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - name: Docker build
      run: |
        docker build . --file Dockerfile --tag saiyam611/medico:latest
    - name: Docker push
      run: |
        docker push saiyam611/medico
  # Deploy to aws ec2
  deploy:
    needs:
      - test-and-build
    runs-on: ubuntu-latest

    steps:
      
      - name: Install AWS CLI 
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: CONNECT TO EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          
            sudo kill -9 $(sudo lsof -t -i:5000)
            pwd
            DIR="medico_final"
            if [ -d "$DIR" ]; then
              echo "DIRECTORY EXISTS"
              cd medico_final
              echo welcome
              git pull https://github.com/SJDev2000/medico_final.git
              echo code pulled
              sudo docker-compose up -d --build
            else
              echo "NOT EXISTS"
              git clone https://github.com/SJDev2000/medico_final.git
              cd medico_final
              echo hi
              sudo docker-compose up -d --build
            fi
            '
    
      
